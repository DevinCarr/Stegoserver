/*!
 * Stegoserver 2014-07-17
 * Copyright (c) 2014 Devin Carr; License: MIT
 */
var stego_watcher={strictType:"lax",currentList:[],potentialList:[],inList:function(a){var b=!1;ip=this.returnIP(a).toString();for(var c=0;c<this.currentList.length;c++)this.currentList[c].toString().indexOf(ip)&&(b=!0);return b},checkThis:function(a,b){var c=!1;c=-1!==this.strictType.indexOf("lax")?this.laxLength(a,b):this.stcLength(a,b),c&&this.updateBlacklist(a)},updateBlacklist:function(a){var b=this;ip=this.returnIP(a),fs.appendFile("./blacklist.txt",ip+"\n",function(a){if(a)throw a;log.blacklist("NEW",ip),b.loadBlacklist()})},returnIP:function(a){var b=a.headers["x-forwarded-for"]||a.connection.remoteAddress||a.socket.remoteAddress||a.connection.socket.remoteAddress,c=/[0-9]+(?:\.[0-9]+){3}/;return b=b.match(c)},loadBlacklist:function(){var a=this;fs.readFile("./blacklist.txt",function(b,c){if(b)throw b;c=c.toString(),a.currentList=c.split("\n")})},laxLength:function(a){return a.url.length>90},stcLength:function(a){return a.url.length>60}},stego_server={start:function(a,b){this.path=b;var c=this;http.createServer(function(a,b){watcher.inList(a)?(b.writeHead(503),b.end()):-1!==a.url.indexOf("/",a.url.length-1)?(a.url+="index.html",c.serveHtml(a,b)):-1!==a.url.indexOf("html")?c.serveHtml(a,b):c.serveOther(a,b)}).listen(a)},serveHtml:function(a,b){var c=this;b.writeHead(200,{"Content-Type":"text/html"}),fs.readFile(this.path+a.url,function(d,e){d?c.returnFour(a,b,d):c.returnTwo(a,b,e)})},serveOther:function(a,b){var c=this;b.writeHead(200,{"Content-Type":"text/plain"}),fs.readFile(this.path+a.url,function(d,e){d?c.returnFour(a,b,d):c.returnTwo(a,b,e)})},returnFour:function(a,b,c){fs.readFile(path+"/404.html",function(d,e){b.writeHead(404,{"Content-Type":"text/html"}),d?(b.write("Error: 404"),b.end()):(b.write(e),b.end()),watcher.checkThis(a,c),log.request("error",c)})},returnTwo:function(a,b,c){b.write(c),b.end(),log.request("complete",a.url)},path:"./app/"},stego_console={request:function(a,b){var c=this.build("request",a,b);fs.appendFile("./server.log",c,function(a){if(a)throw a})},blacklist:function(a,b){var c=this.build("blacklist",a,b);fs.appendFile("./server.log",c,function(a){if(a)throw a})},build:function(a,b,c){b=b||"[INFO]";var d=new Date,e=d.toUTCString()+" ";return""!==a&&(e+="["+a.toUpperCase()+"] "),e+="["+b.toUpperCase()+"] ",e+=-1!==b.indexOf("error")?": "+c.message:": "+c,e+="\n"}},fs=require("fs"),http=require("http"),server=stego_server,log=stego_console,watcher=stego_watcher,main=function(){args=checkArgs(),port=args.port,blacklist=args.blacklist,path=args.path,server.start(port,path,log),log.request("info","Stegoserver starting on port:"+port)},checkArgs=function(){var a=process.argv.slice(2),b=8080,c="lax",d="./app";return a.forEach(function(e,f){if("-h"===e||"--help"===e)console.log("Usage: Stegoserver.js [options]\n\nA simple static Nodejs webserver\n\nOptions:\n  -p, --port [PORT]	The port number to bind the webservice to. Default: 8080\n  -l, --location [FILE_PATH]	The location of the app to serve files from (app folder). Default .\n  -b, --blacklist [TYPE]	A request watcher to actively blacklist bad requests. Default: lax"),process.exit(0);else if("-p"===e)"number"==typeof+a[f+1]&&(b=a[f+1]);else if("-b"===e){var g=a[f+1];"string"==typeof g&&-1!==g.indexOf("strict")&&(c=g)}else if("-l"===e){var h=a[f+1];stats=fs.statSync(h),stats.isDirectory()?d=-1===h.indexOf("/",h.length-1)?h:h.substring(0,h.length-1):(console.log("ERROR: path doesn't exist"),process.exit(0))}}),{port:b,blacklist:c,path:d}};require.main===module&&main();